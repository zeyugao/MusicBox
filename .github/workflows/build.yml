name: Xcode - Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    permissions:
      contents: write
    name: Build
    runs-on: macos-latest

    env:
      BUILD_TYPE: Release
      BUILD_PATH: build
      QT_VERSION: 6.7.0
      archiveName: MusicBox
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: mac
          target: desktop
          arch: clang_64
          install-deps: "true"
          cache: "true"
          aqtversion: "==3.1.*"
          modules: "qt5compat"
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Get QCloudMusicApi latest commit
        id: qcloud-commit
        run: |
          LATEST_COMMIT=$(git ls-remote https://github.com/elsagranger/QCloudMusicApi.git HEAD | cut -f1)
          echo "commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "Latest QCloudMusicApi commit: $LATEST_COMMIT"
      - name: Cache QCloudMusicApi
        id: cache-qcloud
        uses: actions/cache@v4
        with:
          path: ../QCloudMusicApi
          key: qcloud-musicapi-${{ steps.qcloud-commit.outputs.commit }}-${{ env.QT_VERSION }}-${{ env.BUILD_TYPE }}
      - name: Fetch QCloudMusicApi
        if: steps.cache-qcloud.outputs.cache-hit != 'true'
        run: |
          git clone --recurse-submodules --depth=1 https://github.com/elsagranger/QCloudMusicApi.git ../QCloudMusicApi \
          && cd ../QCloudMusicApi \
          && cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_PREFIX_PATH=$(pwd)/../Qt/6.7.0/macos/lib/cmake -GXcode -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
          && cd build \
          && xcodebuild -project QCloudMusicApiProject.xcodeproj -target QCloudMusicApi build -configuration ${{ env.BUILD_TYPE }} ONLY_ACTIVE_ARCH=NO
      - name: Build
        run: |
          xcodebuild -project MusicBox.xcodeproj -scheme MusicBox build -configuration ${{ env.BUILD_TYPE }} CONFIGURATION_BUILD_DIR=$(pwd)/build CODE_SIGN_IDENTITY="-" DEVELOPMENT_TEAM="" ONLY_ACTIVE_ARCH=NO \
          && cp MusicBox/MusicBox.entitlements build/MusicBox.entitlements \
          && cp .github/install.sh build/install.sh \
          && tar czf ${{ env.archiveName }}-dysym.tar.gz -C build . \
          && tar czf ${{ env.archiveName }}.tar.gz -C build MusicBox.app install.sh MusicBox.entitlements
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archiveName }}-dysym
          path: ${{ env.archiveName }}-dysym.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archiveName }}
          path: ${{ env.archiveName }}.tar.gz
      - name: Delete existing nightly release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Delete the existing nightly release if it exists
          gh release delete nightly --yes || true
          # Delete the nightly tag if it exists
          git push origin --delete refs/tags/nightly || true
        env:
          GITHUB_TOKEN: ${{ github.token }}
        continue-on-error: true
      - name: Create nightly pre-release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: nightly
          prerelease: true
          body: |
            Nightly build from commit ${{ github.sha }}

            This is an automated pre-release build. Use at your own risk.
          files: |
            ${{ env.archiveName }}-dysym.tar.gz
            ${{ env.archiveName }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ github.token }}
